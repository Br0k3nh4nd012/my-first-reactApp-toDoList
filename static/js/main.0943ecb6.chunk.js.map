{"version":3,"sources":["NestedListItems.js","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["nestedListItems","props","nestedlistitems","nesteditems","map","nest","className","id","type","nestedkey","value","nestedtext","onChange","e","nestedsetUpdate","target","key","icon","onClick","nesteddeleteItem","duration","easing","ListItems","state","nestedItem","this","setState","Date","now","preventDefault","fuck","console","log","nestfilteredItems","filter","onSubmit","addnested","bind","placeholder","handleNested","listitems","items","item","text","setUpdate","deleteItem","nestedInApp","NestedListItems","React","Component","library","add","faTrash","faPlus","App","currentItem","handleInput","addItem","newItem","filteredItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+VA+CeA,MAzCf,SAAyBC,GACrB,IAEMC,EAFaD,EAAME,YAEUC,KAAI,SAAAC,GACnC,OAAO,yBAAKC,UAAY,cACpB,0BAAMC,GAAK,WACX,2BACA,2BAAOC,KAAO,OACVD,GAAMF,EAAKI,UACXC,MAASL,EAAKM,WACdC,SACI,SAACC,GACGZ,EAAMa,gBAAgBD,EAAEE,OAAOL,MAAML,EAAKW,QAItD,8BACI,kBAAC,IAAD,CAAiBV,UAAY,WAAWW,KAAO,QAC/CC,QACI,kBAAMjB,EAAMkB,iBAAiBd,EAAKW,eAUlD,OACI,6BACI,kBAAC,IAAD,CAAUI,SAAY,IAAKC,OAAS,eACnCnB,KCmIEoB,E,kDA/JX,WAAYrB,GAAO,IAAD,8BACd,cAAMA,IACDsB,MAAQ,CACTpB,YAAY,GAEdqB,WAAW,CACTb,WAAW,GACXF,UAAU,KAPA,E,yDAcLI,GACTY,KAAKC,SAAS,CACVF,WAAW,CACPb,WAAWE,EAAEE,OAAOL,MACpBD,UAAUkB,KAAKC,W,gCAMjBf,GACNA,EAAEgB,iBACF,IAAMC,EAAOL,KAAKF,MAAMC,WAExB,GADAO,QAAQC,IAAIF,GACS,KAAlBA,EAAKnB,WAAgB,CACpB,IAAMR,EAAW,sBAAMsB,KAAKF,MAAMpB,aAAjB,CAA8B2B,IAC/CL,KAAKC,SAAS,CACZvB,YAAaA,EACbqB,WAAW,CACTb,WAAW,GACXF,UAAU,S,sCAONE,EAAWF,GACvB,IAAMN,EAAcsB,KAAKF,MAAMpB,YAC/BA,EAAYC,KAAI,SAAAC,GACbA,EAAKI,YAAaA,IACjBJ,EAAKM,WAAWA,MAGpBc,KAAKC,SAAS,CACdvB,YAAaA,M,uCAGAM,GACb,IAAMwB,EAAoBR,KAAKF,MAAMpB,YAAY+B,QAAO,SAAA7B,GAAI,OACxDA,EAAKI,YAAYA,KACjBgB,KAAKC,SAAS,CACZvB,YAAa8B,M,kCAIXpB,GAER,OADAkB,QAAQC,IAAI,SACL,6BACP,0BAAMzB,GAAK,UAAU4B,SAAWV,KAAKW,UAAUC,KAAKZ,OACpD,2BAAOjB,KAAO,OAAO8B,YAAc,YAC/B5B,MAASe,KAAKF,MAAMC,WAAWb,WAC/BC,SAAYa,KAAKc,aAAaF,KAAKZ,QAEvC,2C,+BAOK,IAAD,OAEEe,EADQf,KAAKxB,MAAMwC,MACDrC,KAAI,SAAAsC,GAC5B,OAAO,yBAAKpC,UAAY,OAAOU,IAAO0B,EAAK1B,KACvC,2BACI,2BAAOR,KAAO,OACdD,GAAMmC,EAAK1B,IACXN,MAASgC,EAAKC,KACd/B,SACI,SAACC,GACG,EAAKZ,MAAM2C,UAAU/B,EAAEE,OAAOL,MAAMgC,EAAK1B,QAIrD,8BACI,kBAAC,IAAD,CAAiBV,UAAY,UAAUW,KAAO,QAC9CC,QACI,kBAAM,EAAKjB,MAAM4C,WAAWH,EAAK1B,UAQzC,8BACI,kBAAC,IAAD,CAAiBV,UAAY,QAAQW,KAAO,OAC5CC,QACI,kBAAM,EAAK4B,kBAMnB,yBAAKxC,UAAY,WACjB,0BAAMC,GAAK,UAAU4B,SAAW,EAAKC,UAAUC,KAAK,IACpD,2BAAO7B,KAAO,OAAO8B,YAAc,YAC/B5B,MAAS,EAAKa,MAAMC,WAAWb,WAC/BC,SAAY,EAAK2B,aAAaF,KAAK,KAEvC,wCAGA,kBAACU,EAAD,CACA5C,YAAe,EAAKoB,MAAMpB,YAC1BW,gBAAmB,EAAKA,gBAAgBuB,KAAK,GAC7ClB,iBAAoB,EAAKA,iBAAiBkB,KAAK,UAiBvD,OACI,6BACI,kBAAC,IAAD,CAAUjB,SAAY,IAAKC,OAAS,eACnCmB,Q,GA9IWQ,IAAMC,W,cCD9BC,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,K,IAuGGC,E,kDApGb,WAAYrD,GAAO,IAAD,8BAChB,cAAMA,IACDsB,MAAQ,CACXkB,MAAM,GACNc,YAAY,CACVZ,KAAK,GACL3B,IAAI,KAKR,EAAKwC,YAAc,EAAKA,YAAYnB,KAAjB,gBACnB,EAAKoB,QAAU,EAAKA,QAAQpB,KAAb,gBAEf,EAAKO,UAAY,EAAKA,UAAUP,KAAf,gBAdD,E,wDAkBNxB,GACVY,KAAKC,SAAS,CACV6B,YAAY,CACRZ,KAAK9B,EAAEE,OAAOL,MACdM,IAAIW,KAAKC,W,8BAKXf,GACNA,EAAEgB,iBACF,IAAM6B,EAAUjC,KAAKF,MAAMgC,YAG3B,GAFAxB,QAAQC,IAAI0B,GAEM,KAAfA,EAAQf,KAAU,CACnB,IAAMF,EAAK,sBAAMhB,KAAKF,MAAMkB,OAAjB,CAAwBiB,IACnCjC,KAAKC,SAAS,CACZe,MAAOA,EACPc,YAAY,CACVZ,KAAK,GACL3B,IAAI,MAIRe,QAAQC,IAAIP,KAAKF,MAAMkB,U,iCAIhBzB,GACT,IAAM2C,EAAgBlC,KAAKF,MAAMkB,MAAMP,QAAO,SAAAQ,GAAI,OAChDA,EAAK1B,MAAMA,KACXS,KAAKC,SAAS,CACZe,MAAOkB,M,gCAGHhB,EAAK3B,GACb,IAAMyB,EAAQhB,KAAKF,MAAMkB,MACzBA,EAAMrC,KAAI,SAAAsC,GACLA,EAAK1B,MAAOA,IACb0B,EAAKC,KAAKA,MAGdlB,KAAKC,SAAS,CACZe,MAAOA,M,+BAST,OACE,yBAAKnC,UAAY,OACf,gCACA,0BAAMC,GAAK,aAAa4B,SAAYV,KAAKgC,SACvC,2BAAOjD,KAAO,OAAO8B,YAAc,qBACnC5B,MAAQe,KAAKF,MAAMgC,YAAYZ,KAC/B/B,SAAUa,KAAK+B,cAEb,4BAAQhD,KAAO,UAAf,SAIN,kBAAC,EAAD,CACEiC,MAAShB,KAAKF,MAAMkB,MACpBI,WAAcpB,KAAKoB,WAAWR,KAAKZ,MACnCmB,UAAanB,KAAKmB,iB,GAtFRI,IAAMC,WCCJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.0943ecb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport'./nestedListItems.css';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\nfunction nestedListItems(props){\r\n    const nestedlist = props.nesteditems;\r\n    \r\n    const nestedlistitems = nestedlist.map(nest =>{\r\n        return <div className = \"nestedList\">\r\n            <form id = \"sublist\" >\r\n            <p>\r\n            <input type = \"text\" \r\n                id = {nest.nestedkey} \r\n                value = {nest.nestedtext}\r\n                onChange = {\r\n                    (e) =>{\r\n                        props.nestedsetUpdate(e.target.value,nest.key)    \r\n                    }\r\n                }\r\n                />\r\n            <span>\r\n                <FontAwesomeIcon className = \"faiconsn\" icon = \"trash\"\r\n                onClick = {\r\n                    () => props.nesteddeleteItem(nest.key)\r\n                }\r\n                />\r\n            </span>\r\n\r\n            </p>\r\n\r\n            </form>\r\n        </div>\r\n    })\r\n    return(\r\n        <div>\r\n            <FlipMove duration = {300} easing = \"ease-in-out\">\r\n            {nestedlistitems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n    \r\n    \r\n    \r\n}\r\n\r\nexport default nestedListItems;","import React from 'react';\r\nimport'./ListItems.css';\r\nimport App from './App'\r\nimport NestedListItems from './NestedListItems'\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\n\r\nclass ListItems extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            nesteditems:[],\r\n          \r\n          nestedItem:{\r\n            nestedtext:\"\",\r\n            nestedkey:\"\"\r\n          }\r\n        }\r\n        }\r\n        \r\n        \r\n    \r\n    handleNested(e){\r\n        this.setState({\r\n            nestedItem:{\r\n                nestedtext:e.target.value,\r\n                nestedkey:Date.now()\r\n            }\r\n        });\r\n\r\n        \r\n    }\r\n    addnested(e){\r\n        e.preventDefault();\r\n        const fuck = this.state.nestedItem;\r\n        console.log(fuck);\r\n        if(fuck.nestedtext!==\"\"){\r\n            const nesteditems =[...this.state.nesteditems, fuck];\r\n            this.setState({\r\n              nesteditems: nesteditems,\r\n              nestedItem:{\r\n                nestedtext:\"\",\r\n                nestedkey:\"\"\r\n              },\r\n              \r\n            })\r\n          }\r\n          \r\n    }\r\n    nestedsetUpdate(nestedtext,nestedkey){\r\n        const nesteditems = this.state.nesteditems;\r\n        nesteditems.map(nest =>{\r\n        if(nest.nestedkey ===nestedkey){\r\n            nest.nestedtext=nestedtext;\r\n            }\r\n        })\r\n        this.setState({\r\n        nesteditems: nesteditems\r\n            })\r\n        }\r\n    nesteddeleteItem(nestedkey){\r\n        const nestfilteredItems = this.state.nesteditems.filter(nest =>\r\n            nest.nestedkey!==nestedkey);\r\n            this.setState({\r\n              nesteditems: nestfilteredItems,\r\n            })\r\n        }\r\n\r\n    nestedInApp(e){\r\n        console.log(\"macha\");\r\n        return <div>\r\n        <form id = \"subtask\" onSubmit ={this.addnested.bind(this, )}>\r\n        <input type = \"text\" placeholder = \"sub to do\"\r\n            value = {this.state.nestedItem.nestedtext}\r\n            onChange = {this.handleNested.bind(this, )} \r\n        />\r\n        <button>add</button>\r\n\r\n        </form> \r\n    </div>\r\n    }\r\n    \r\n    \r\n    render(){\r\n        const items = this.props.items; \r\n        const listitems = items.map(item =>{\r\n        return <div className = \"list\" key = {item.key}>\r\n            <p>\r\n                <input type = \"text\" \r\n                id = {item.key} \r\n                value = {item.text}\r\n                onChange = {\r\n                    (e) =>{\r\n                        this.props.setUpdate(e.target.value,item.key)    \r\n                    }\r\n                }\r\n                />\r\n            <span>\r\n                <FontAwesomeIcon className = \"faicons\" icon = \"trash\"\r\n                onClick = {\r\n                    () => this.props.deleteItem(item.key)\r\n                }\r\n                />\r\n            </span>\r\n            \r\n            \r\n            \r\n            </p>\r\n            <span>\r\n                <FontAwesomeIcon className = \"faico\" icon = \"plus\"\r\n                onClick = {\r\n                    () => this.nestedInApp()\r\n                }\r\n                    \r\n                \r\n                />\r\n            </span>\r\n            <div className = \"newnest\">\r\n            <form id = \"subtask\" onSubmit ={this.addnested.bind(this, )}>\r\n            <input type = \"text\" placeholder = \"sub to do\"\r\n                value = {this.state.nestedItem.nestedtext}\r\n                onChange = {this.handleNested.bind(this, )} \r\n            />\r\n            <button>add</button>\r\n\r\n            </form>\r\n            <NestedListItems\r\n            nesteditems = {this.state.nesteditems}\r\n            nestedsetUpdate = {this.nestedsetUpdate.bind(this, )}\r\n            nesteddeleteItem = {this.nesteddeleteItem.bind(this,)}\r\n            >\r\n                \r\n            </NestedListItems> \r\n        </div>\r\n            \r\n            \r\n            \r\n            \r\n            \r\n    </div >\r\n\r\n    })\r\n    \r\n    \r\n    \r\n   \r\n    return(\r\n        <div>\r\n            <FlipMove duration = {300} easing = \"ease-in-out\">\r\n            {listitems}\r\n            </FlipMove>\r\n            \r\n                \r\n\r\n            \r\n            \r\n\r\n            \r\n                \r\n            \r\n             \r\n            </div>\r\n    )\r\n\r\n    }\r\n        \r\n}\r\nexport default ListItems;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport {faPlus} from '@fortawesome/free-solid-svg-icons';\nimport nestedListItems from './nestedListItems';\n\nlibrary.add(faTrash);\nlibrary.add(faPlus);\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text:\"\",\n        key:\"\"\n      },\n      \n      \n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n\n    this.setUpdate = this.setUpdate.bind(this);\n    \n    \n  }\n  handleInput(e){\n    this.setState({\n        currentItem:{\n            text:e.target.value,\n            key:Date.now()\n        }\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    \n    if(newItem.text!==\"\"){\n      const items =[...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem:{\n          text:\"\",\n          key:\"\"\n        },\n        \n      })\n      console.log(this.state.items);\n    }\n\n  }\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item =>\n      item.key!==key);\n      this.setState({\n        items: filteredItems,\n      })\n  }\n  setUpdate(text,key){\n    const items = this.state.items;\n    items.map(item =>{\n      if(item.key ===key){\n        item.text=text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n\n  }\n\n  \n    \n  \n  render(){\n    return (\n      <div className = \"App\">\n        <header>\n        <form id = \"to-do-form\" onSubmit = {this.addItem}>\n          <input type = \"text\" placeholder = \"work to be done...\"\n          value ={this.state.currentItem.text}\n          onChange={this.handleInput}\n          />\n            <button type = \"submit\" >add</button>\n          \n        </form>\n      </header>\n      <ListItems \n        items = {this.state.items}\n        deleteItem = {this.deleteItem.bind(this,)}\n        setUpdate = {this.setUpdate}\n        \n        \n      >\n        \n      </ListItems>\n      \n      \n      \n      \n      </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}